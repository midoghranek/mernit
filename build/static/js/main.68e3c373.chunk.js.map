{"version":3,"sources":["app/App.js","app/serviceWorker.js","app/index.js"],"names":["axios","defaults","baseURL","App","state","welcome","get","then","res","setState","data","className","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kQAGAA,IAAMC,SAASC,QAAU,6B,IAoBVC,E,2MAjBbC,MAAQ,CACNC,QAAS,I,mFAGU,IAAD,OAClBL,IAAMM,IAAI,KAAKC,MAAK,SAAAC,GAClB,EAAKC,SAAS,CACZJ,QAASG,EAAIE,Y,+BAMjB,OAAO,yBAAKC,UAAU,OAAOC,KAAKR,MAAMC,a,GAd1BQ,IAAMC,WCLlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2DA8BN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTf,MAAK,SAAAoB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzB,QACfoB,UAAUC,cAAcO,YAC1BC,QAAQC,IACN,iHAIEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAGlBM,QAAQC,IAAI,sCAERX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MC5DjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDE1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAImB,IAAIC,GAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OACvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,GAAN,sBAEP7B,IAoDV,SAAiCO,EAAOC,GACtCyB,MAAM1B,GACHf,MAAK,SAAA0C,GACJ,IAAMC,EAAcD,EAASE,QAAQ7C,IAAI,gBAEnB,MAApB2C,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAE5C7B,UAAUC,cAAc6B,MAAM/C,MAAK,SAAAoB,GACjCA,EAAa4B,aAAahD,MAAK,WAC7BU,OAAOC,SAASsC,eAIpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAtEAuB,CAAwBnC,EAAOC,GAE/BC,UAAUC,cAAc6B,MAAM/C,MAAK,WACjC0B,QAAQC,IACN,iHAKJb,EAAgBC,EAAOC,OCpB/BE,K","file":"static/js/main.68e3c373.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"http://localhost:9090/api/\";\n\nclass App extends React.Component {\n  state = {\n    welcome: \"\"\n  };\n\n  componentDidMount() {\n    axios.get(\"/\").then(res => {\n      this.setState({\n        welcome: res.data\n      });\n    });\n  }\n\n  render() {\n    return <div className=\"app\">{this.state.welcome}</div>;\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log(\"Content is cached for offline use.\");\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl)\n    .then(response => {\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/main.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}